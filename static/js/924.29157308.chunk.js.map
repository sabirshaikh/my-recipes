{"version":3,"file":"static/js/924.29157308.chunk.js","mappings":"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","sources":["components/UI/InputControl.js","components/RecipeCard/RecipeCard1.js","Hooks/useInput.js","pages/Recipes.js"],"sourcesContent":["import React, { useImperativeHandle} from \"react\";\r\n\r\nconst InputControl = React.forwardRef((props, ref) => {\r\n    // useImperativeHandle(ref, () => {\r\n    //     return {\r\n    //         focus: () => {\r\n    //             inputRef.current.focus();\r\n    //         },\r\n    //         value: () => {\r\n    //             return inputRef.current.value;\r\n    //         }\r\n    //     }\r\n    // });\r\n    return (\r\n        <input \r\n            ref={ref}\r\n            {...props}\r\n        />\r\n    )\r\n})\r\n\r\nexport default InputControl;","import { Link } from \"react-router-dom\";\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport 'react-lazy-load-image-component/src/effects/blur.css';\r\nconst RecipeCard1 = (props) => {\r\n    const rating = parseInt(props.rating);\r\n    const id = encodeURIComponent(props.recipeUrl);\r\n    const RatingBlock = () => {\r\n        let star = [];\r\n        for(let i=0; i < rating; i++) {\r\n            star.push( <li key={'s' + i} className=\"active\"></li>)\r\n        }\r\n        return star;\r\n    }\r\n\r\n    return (\r\n        <div className=\"background-white thum-hover box-shadow hvr-float full-width full-height\">\r\n            <div className=\"float-md-left margin-right-30px thum-xs\">\r\n            <Link to={`/recipeDetails/${id}`}>\r\n            <LazyLoadImage\r\n                src={props.recipeImage}\r\n                effect=\"blur\"\r\n                width='100%'\r\n                className=\"width-250px\"\r\n            />\r\n          \r\n                {/* <img className=\"width-250px\" src={props.recipeImage} alt=\"\" /> */}\r\n            </Link>\r\n            </div>\r\n            <div className=\"padding-25px\">\r\n                <div className=\"rating\">\r\n                    <ul>\r\n                        <RatingBlock/>\r\n                    </ul>\r\n                </div>\r\n                <h3> <Link to={`/recipeDetails/${id}`} href=\"#\" className=\"d-block text-dark text-capitalize text-medium margin-tb-15px\">{props.recipeName} </Link></h3>\r\n                <hr />\r\n                <div className=\"row no-gutters\">\r\n                    <div className=\"col-4 text-left\"><a href=\"#\" className=\"text-red\"><i className=\"far fa-heart\"></i> Save</a></div>\r\n                    <div className=\"col-8 text-right\"><a href=\"#\" className=\"text-grey-2\"><i className=\"fas fa-users\"></i> {props.recipeServing} servings</a></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"clearfix\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecipeCard1;","import { useState } from \"react\"\r\n\r\n\r\nconst useInput = (validateValue) => {\r\n    const [enteredValue, setEnteredValue] = useState('');\r\n    const [isTouched, setIsTouched] = useState(false);\r\n\r\n    const valueIsValid = validateValue(enteredValue);\r\n    const hasError = !valueIsValid && isTouched;\r\n\r\n\r\n    const valueChangedHandler = (event) => {\r\n        setEnteredValue(event.target.value);\r\n    }\r\n\r\n    const inputBlurHandler = (event) => {\r\n        setIsTouched(true);\r\n    }\r\n\r\n    const reset = () => {\r\n        setEnteredValue('');\r\n        setIsTouched(false);\r\n    }\r\n    return {\r\n        value: enteredValue,\r\n        hasError,\r\n        valueChangedHandler,\r\n        inputBlurHandler,\r\n        isValid: valueIsValid,\r\n        reset\r\n    }\r\n}\r\n\r\nexport default useInput;","import { Fragment, useCallback, useState, useRef } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { layoutActions, recipeActions } from \"../Store\";\r\nimport RecipeCard1 from \"../components/RecipeCard/RecipeCard1\";\r\nimport axios from \"axios\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport InputControl from \"../components/UI/InputControl\";\r\nimport useInput from \"../Hooks/useInput\";\r\nconst Category = () => {\r\n    const history = useHistory();\r\n    const params = useParams();\r\n    const [from, setFrom] = useState(0);\r\n    const [recipesBlock, setRecipesBlock] = useState([]);\r\n    const categoryName = params.id ? params.id.trim() : 'indian';\r\n    const [error, setError] = useState(false);\r\n    const showLoader = useSelector(state => state.layoutReducer.showLoader);\r\n    const recipes = useSelector(state => state.recipeReducer.recipes);\r\n    const currentCategory = useSelector(state => state.recipeReducer.currentCategory);\r\n    \r\n    const {\r\n        value: enteredSearchValue,\r\n        hasError: searchHasError,\r\n        valueChangedHandler: searchChangedHandler,\r\n        inputBlurHandler: searchBlurHandler,\r\n        isValid: enteredSearchValueIsValid,\r\n        reset: resetSearchValue\r\n    } = useInput(value => value.trim() !== '');\r\n    const searchControlRef = useRef('');\r\n\r\n    let formIsValid = false;\r\n    if (enteredSearchValueIsValid ) {\r\n        formIsValid = true\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(()=> {\r\n        dispatch(layoutActions.setHeaderAlignment('text-left'));\r\n    },[])\r\n\r\n    useEffect(()=> {\r\n        dispatch(layoutActions.setTitle(`${categoryName} Recipes | Cook Note`));\r\n\r\n        if(currentCategory.toLowerCase() !== categoryName.toLowerCase() || recipes.length === 0) {\r\n            dispatch(recipeActions.setCategory(categoryName.toLowerCase()))\r\n            fetchRecipes(null, true);\r\n        }\r\n    }, [categoryName])\r\n\r\n    useEffect(() => {\r\n        if(from > 0) {\r\n            fetchRecipes({\r\n                from,\r\n                to: from + 10\r\n            })\r\n        }\r\n    }, [from]);\r\n\r\n    useEffect(() => {\r\n        const recipeBlock = recipes.map((data, i) => {\r\n            return (\r\n                <div  key={i} className=\"col-lg-6 margin-bottom-30px\">\r\n                    <RecipeCard1 \r\n                        recipeName={data.recipe.label} \r\n                        recipeUrl={data.recipe.uri}\r\n                        recipeImage={data.recipe.image}\r\n                        recipeServing={data.recipe.yield} \r\n                        rating={ Math.floor(Math.random() * (5 - 1 + 1)) + 1} \r\n                    />\r\n                </div>\r\n            )\r\n        })\r\n        setRecipesBlock(recipeBlock);\r\n    }, [recipes]);\r\n\r\n    const fetchRecipes = useCallback((showMore, replace = false) => {\r\n        dispatch(layoutActions.showLoader(true));\r\n        let apiCall = `https://api.edamam.com/search?imageSize=THUMBNAIL&q='${categoryName}'&app_key=21b0439f73d40762540d12bb2dcccc9d&app_id=87dc6b39`;\r\n        if(showMore) {\r\n            const {from, to} = showMore;\r\n            apiCall = `https://api.edamam.com/search?from=${from}&to=${to}&imageSize=THUMBNAIL&q='${categoryName}'&app_key=21b0439f73d40762540d12bb2dcccc9d&app_id=87dc6b39`;\r\n        }\r\n\r\n        try {\r\n            axios.get(apiCall)\r\n            .then((res)=> {\r\n                if(res.status === 200) {\r\n                    dispatch(recipeActions.setRecipes({\r\n                        data: res.data.hits,\r\n                        replace\r\n                    }))\r\n                }\r\n                dispatch(layoutActions.showLoader(false));\r\n                setError(false);\r\n            })\r\n            .catch((error)=> {\r\n                dispatch(layoutActions.showLoader(false));\r\n                setError(true);\r\n            })\r\n        } catch (error) {\r\n            dispatch(layoutActions.showLoader(false));\r\n        }\r\n    });\r\n\r\n    const showMoreRecipesHandler = () => {\r\n        setFrom(count => count + 1)\r\n    }\r\n\r\n    const searchHandler = (e) => {\r\n        e.preventDefault();\r\n        searchControlRef.current.blur();\r\n        if(!formIsValid) {\r\n            console.log(\"form is invalidated\")\r\n            return;\r\n        } \r\n        resetSearchValue();\r\n        history.push(`/recipes/${searchControlRef.current.value}`)\r\n\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Helmet>\r\n\t\t\t\t<title>Cook Note - {categoryName} Food Recipes</title>\r\n\t\t\t</Helmet>\r\n            <div className=\"container\">\r\n                <div className=\"margin-bottom-60px\">\r\n                    <div className=\"listing-search box-shadow\">\r\n                        <form className=\"row no-gutters\" onSubmit={searchHandler}>\r\n                            <div className=\"col-md-8\">\r\n                                <div className=\"keywords\">\r\n                                    {/* <input  /> */}\r\n                                    <InputControl \r\n                                        ref={searchControlRef}\r\n                                        className={`listing-form first ${searchHasError ? 'inValid' : ''}`}\r\n                                        type=\"text\" \r\n                                        value={enteredSearchValue}\r\n                                        placeholder=\"Enter recipe name\" \r\n                                        onChange={searchChangedHandler}\r\n                                        onBlur={searchBlurHandler}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-4\">\r\n                                <button type=\"submit\" className=\"listing-bottom background-second-color box-shadow btn\" disabled={!formIsValid}>Search Now</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                    {searchHasError  && <p className=\"text-main-color mt-3\">Please enter value</p>}\r\n                </div>\r\n            </div>\r\n            <div className=\"container margin-bottom-100px\">\r\n                {error && <p>Something went wrong!</p>}\r\n                { recipesBlock.length === 0 && !showLoader && !error ? <p>{categoryName} Recipes Not Found, Please try again <Link to=\"/recipes\" className=\"text-main-color\">recipes</Link></p> : <div className=\"row\">\r\n                    {!error && recipesBlock}\r\n                </div>\r\n                }\r\n                {   \r\n                    !error && recipesBlock && <div className=\"text-center\">\r\n                        <button onClick={showMoreRecipesHandler} className=\"btn box-shadow margin-top-50px padding-tb-10px btn-sm border-2 border-radius-30 btn-inline-block width-210px background-second-color text-white\">Show More Recipes</button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Category;"],"names":["InputControl","React","props","ref","rating","parseInt","id","encodeURIComponent","recipeUrl","RatingBlock","star","i","push","className","to","LazyLoadImage","src","recipeImage","effect","width","href","recipeName","recipeServing","validateValue","useState","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","value","hasError","valueChangedHandler","event","target","inputBlurHandler","isValid","reset","history","useHistory","params","useParams","from","setFrom","recipesBlock","setRecipesBlock","categoryName","trim","error","setError","showLoader","useSelector","state","layoutReducer","recipes","recipeReducer","currentCategory","useInput","enteredSearchValue","searchHasError","searchChangedHandler","searchBlurHandler","enteredSearchValueIsValid","resetSearchValue","searchControlRef","useRef","formIsValid","dispatch","useDispatch","useEffect","layoutActions","toLowerCase","length","recipeActions","fetchRecipes","recipeBlock","map","data","recipe","label","uri","image","yield","Math","floor","random","useCallback","showMore","replace","apiCall","axios","then","res","status","hits","catch","Fragment","Helmet","onSubmit","e","preventDefault","current","blur","console","log","type","placeholder","onChange","onBlur","disabled","onClick","count"],"sourceRoot":""}